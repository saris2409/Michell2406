{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Michell2406/Michell2406/blob/main/codigo_proyecto_final_algoritmos.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "equjnS26WATV",
        "outputId": "a96dec58-5ed9-4dd5-852c-d5a3afedf322"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "BIENVENIDO AL HOTEL EL BOSQUE\n"
          ]
        }
      ],
      "source": [
        "print(\"BIENVENIDO AL HOTEL EL BOSQUE\")\n",
        "def MenuOpciones():\n",
        "  print(\"1. 🛌 Registro de Habitación\")\n",
        "  print(\"2. 🛌 Consultar disponibilidad de Habitaciones\")\n",
        "  print(\"3. 🙋 Registro Huespedes\")\n",
        "  print(\"4. 📅 Realizar Reserva\")\n",
        "  print(\"5. 🛎️ Registro Ingreso (Check-In)\")\n",
        "  print(\"6. ➡️ Registro Salida (Check-Out)\")\n",
        "  print(\"7. 📊 Administración\")\n",
        "  print(\"8. Graficos\")\n",
        "  print(\"9. Salir\")\n",
        "\n",
        "Habitaciones = {}\n",
        "Huespedes = {}\n",
        "Reservas = {}\n",
        "Disponible = {}"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "RAogUTo-Wmxw"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "\n",
        "def RegistrodeHabitacion(codigo):\n",
        "  print(\"🛌Ingresó a la función Registro de Habitación\")\n",
        "  print(\"🛌Registro de Habitación\")\n",
        "  codigo = input(\"Número de la Habitación: \")\n",
        "  if codigo in Habitaciones:\n",
        "    print(\"El número ya existe.\")\n",
        "    return\n",
        "\n",
        "  Tipo = input(\"Ingrese el tipo de habitación (Sencilla, Doble, Familiar, Suite): \")\n",
        "  Capacidad = input(\"Ingrese la capacidad (Número de personas): \")\n",
        "  Costo = float(input(\"Ingrese el costo por noche por persona: \"))\n",
        "  Estado = \"Disponible\"\n",
        "\n",
        "  Habitaciones[codigo] = {\n",
        "      \"Tipo\": Tipo,\n",
        "      \"Capacidad\": Capacidad,\n",
        "      \"Costo de la Habitación\": Costo,\n",
        "      \"Estado\": \"Disponible\"\n",
        "      }\n",
        "\n",
        "  Disponible[codigo] = Habitaciones[codigo]\n",
        "\n",
        "  # Convert the dictionary to a DataFrame and save to CSV\n",
        "  df_habitacion = pd.DataFrame([Habitaciones[codigo]])\n",
        "  df_habitacion.to_csv(\"Habitaciones.csv\", mode=\"a\", header=False, index=False)\n",
        "\n",
        "  print (\"🛌 Habitación registrada exitosamente.\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "i4pA0tBsmacP"
      },
      "outputs": [],
      "source": [
        "def ActualizarHabitacion(codigo):\n",
        "  print(\"🛌 Actualizar Habitaciones\")\n",
        "  codigo = input(\"Número de la Habitación: \")\n",
        "  if codigo not in Habitaciones:\n",
        "    print(\"❌ La habitación no existe.\")\n",
        "\n",
        "\n",
        "  Tipo = input(\"Ingrese el tipo de habitación (Sencilla, Doble, Familiar, Suite): \")\n",
        "  Capacidad = input(\"Ingrese la capacidad (Número de personas): \")\n",
        "  Costo = float(input(\"Ingrese el costo por noche por persona: \"))\n",
        "  Estado = \"Disponible\"\n",
        "\n",
        "  Habitaciones[codigo] = {\n",
        "      \"Tipo\": Tipo,\n",
        "      \"Capacidad\": Capacidad,\n",
        "      \"Costo de la Habitación\": valor_habitacion,\n",
        "      \"Estado\": \"Disponible\"\n",
        "      }\n",
        "\n",
        "  print(\"🛌 Habitación actualizada exitosamente.\")\n",
        "  return"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ejdHaPNOr3Xl"
      },
      "outputs": [],
      "source": [
        "def valor_habitacion ():\n",
        "\n",
        "  print(\"🛌 Tipo de Habitación\")\n",
        "  Tipo = input(\"Ingrese el tipo de habitación (Sencilla, Doble, Familiar, Suite): \")\n",
        "  valor_habitacion = 0\n",
        "  if Tipo.lower() == \"sencilla\":\n",
        "    valor_habitacion = 50000\n",
        "  elif Tipo.lower() == \"doble\":\n",
        "    valor_habitacion = 60000\n",
        "  elif Tipo.lower() == \"familiar\":\n",
        "    valor_habitacion = 80000\n",
        "  elif Tipo.lower() == \"suite\":\n",
        "    valor_habitacion = 90000\n",
        "  return valor_habitacion\n",
        "\n",
        "def consultardisponibilidaddeHabitaciones():\n",
        "\n",
        " print(\"🏨 Habitaciones Disponibles:\")\n",
        " if not Disponible:\n",
        "    print(\"❎ No hay habitaciones disponibles.\")\n",
        " else:\n",
        "   for codigo, datos in Disponible.items():\n",
        "    if datos[\"Estado\"] == \"Disponible\":\n",
        "      print(f\"Habitación {codigo} - Tipo: {datos['Tipo']} - Capacidad: {datos['Capacidad']}\")"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import re\n",
        "\n",
        "def validar_documento(doc):\n",
        "    if not doc.isdigit():\n",
        "        print(\"❌ El documento debe contener solo números.\")\n",
        "        return False\n",
        "    if not (3 <= len(doc) <= 15):\n",
        "        print(\"❌ El documento debe tener entre 3 y 15 dígitos.\")\n",
        "        return False\n",
        "    return True\n",
        "\n",
        "def validar_nombre(nombre):\n",
        "    nombre = nombre.strip()\n",
        "    if len(nombre) < 3:\n",
        "        print(\"❌ El nombre debe tener al menos 3 letras.\")\n",
        "        return False\n",
        "    if not re.match(r\"^[A-Za-zÁÉÍÓÚÑáéíóúñ\\s]+$\", nombre):\n",
        "        print(\"❌ No se permiten números ni caracteres especiales.\")\n",
        "        return False\n",
        "    return True\n",
        "\n",
        "def validar_apellidos(apellidos):\n",
        "    apellidos = apellidos.strip()\n",
        "    if len(apellidos) < 3:\n",
        "        print(\"❌ El apellido debe tener al menos 3 letras.\")\n",
        "        return False\n",
        "    if not re.match(r\"^[A-Za-zÁÉÍÓÚÑáéíóúñ\\s]+$\", apellidos):\n",
        "        print(\"❌ No se permiten números ni caracteres especiales.\")\n",
        "        return False\n",
        "    return True\n",
        "\n",
        "def validar_telefono(telefono):\n",
        "    if not telefono.isdigit():\n",
        "        print(\"❌ El teléfono solo debe contener números.\")\n",
        "        return False\n",
        "    if not (7 <= len(telefono) <= 10):\n",
        "        print(\"❌ El teléfono debe tener entre 7 y 10 dígitos.\")\n",
        "        return False\n",
        "    return True\n",
        "\n",
        "def validar_correo(correo):\n",
        "    if not re.match(r\"^[\\w\\.-]+@[\\w\\.-]+\\.\\w+$\", correo):\n",
        "        print(\"❌ Correo electrónico inválido. Debe contener '@' y un dominio.\")\n",
        "        return False\n",
        "    return True\n",
        "\n",
        "def RegistroHuespedes():\n",
        "       while True:\n",
        "        print(\"🙋 Registro de Huésped\")\n",
        "        tipodedocumento = input(\"Tipo de documento (CC, TI, CE, etc.): \")\n",
        "\n",
        "        documento = input(\"Documento de identidad del Huésped: \")\n",
        "        if documento in Huespedes:\n",
        "            print(\"🙋 El huésped ya está registrado.\")\n",
        "            actualizar = input(\"¿Desea actualizar la información del huésped? (S/N): \").lower()\n",
        "            if actualizar != \"s\":\n",
        "                return\n",
        "\n",
        "        while not validar_documento(documento):\n",
        "            documento = input(\"Documento de identidad del Huésped: \")\n",
        "\n",
        "        nombre = input(\"Nombre: \")\n",
        "        while not validar_nombre(nombre):\n",
        "            nombre = input(\"Nombre: \")\n",
        "\n",
        "        apellidos = input(\"Apellidos: \")\n",
        "        while not validar_apellidos(apellidos):\n",
        "            apellidos = input(\"Apellidos: \")\n",
        "\n",
        "        telefono = input(\"Teléfono: \")\n",
        "        while not validar_telefono(telefono):\n",
        "            telefono = input(\"Teléfono: \")\n",
        "\n",
        "        correo = input(\"Correo electrónico: \")\n",
        "        while not validar_correo(correo):\n",
        "            correo = input(\"Correo electrónico: \")\n",
        "\n",
        "\n",
        "        Huespedes[documento] = {\n",
        "            \"Tipo de documento\": tipodedocumento,\n",
        "            \"Documento\": documento,\n",
        "            \"Nombre\": nombre,\n",
        "            \"Apellidos\": apellidos,\n",
        "            \"Teléfono\": telefono,\n",
        "            \"Correo electrónico\": correo\n",
        "        }\n",
        "\n",
        "        print(\"✅🙋 Huésped registrado exitosamente.\")\n",
        "\n",
        "        import os\n",
        "\n",
        "        archivo = \"Huespedes.csv\"\n",
        "        es_nuevo = not os.path.exists(archivo)\n",
        "\n",
        "        DfHuespedes = pd.DataFrame([Huespedes[documento]])\n",
        "        DfHuespedes.to_csv(archivo, mode='a', header=es_nuevo, index=False)\n",
        "\n",
        "        otro = input(\"¿Desea registrar otro huésped? (S/N): \").lower()\n",
        "        if otro != \"s\":\n",
        "            break"
      ],
      "metadata": {
        "id": "WG6uq_MQ9dvr"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from ast import Try\n",
        "#Reserva\n",
        "\n",
        "from datetime import datetime, timedelta\n",
        "\n",
        "def RealizarReserva():\n",
        "    print(\"📅 Realizar Reserva de Habitación\")\n",
        "\n",
        "    documento = input(\"Ingrese el documento del huésped: \")\n",
        "    if documento not in Huespedes:\n",
        "        print(\"❌ El huésped no está registrado. No se puede realizar la reserva.\")\n",
        "        return\n",
        "\n",
        "    nombre_huesped = Huespedes[documento]['Nombre'] + \" \" + Huespedes[documento]['Apellidos']\n",
        "\n",
        "    tipo = input(\"Ingrese el tipo de habitación a reservar (Sencilla, Doble, Familiar, Suite): \").capitalize()\n",
        "    if tipo not in [\"Sencilla\", \"Doble\", \"Familiar\", \"Suite\"]:\n",
        "        print(\"❌ Tipo de habitación no válido.\")\n",
        "        return\n",
        "    disponibles = [codigo for codigo, datos in Habitaciones.items()\n",
        "                   if datos[\"Tipo\"].lower() == tipo.lower() and datos[\"Estado\"] == \"Disponible\"]\n",
        "\n",
        "    if not disponibles:\n",
        "        print(f\"❌ No hay habitaciones disponibles del tipo {tipo}.\")\n",
        "        return\n",
        "\n",
        "    print(\"Habitaciones disponibles:\", disponibles)\n",
        "    habitacion = input(\"Ingrese el número de habitación a reservar: \")\n",
        "    if habitacion not in disponibles:\n",
        "        print(\"❌ Habitación no disponible o no existe.\")\n",
        "        return\n",
        "\n",
        "    try:\n",
        "        fecha_ingreso = input(\"Ingrese la fecha de ingreso (AAAA-MM-DD): \")\n",
        "        fecha_ingreso_dt = datetime.strptime(fecha_ingreso, \"%Y-%m-%d\")\n",
        "        noches = int(input(\"Ingrese el número de noches de estancia: \"))\n",
        "        if noches <= 0:\n",
        "            print(\"❌ El número de noches debe ser mayor a cero.\")\n",
        "            return\n",
        "    except ValueError:\n",
        "        print(\"❌ Fecha o número de noches inválidos.\")\n",
        "        return\n",
        "\n",
        "    fecha_salida_dt = fecha_ingreso_dt + timedelta(days=noches)\n",
        "\n",
        "    if tipo.lower() == \"sencilla\":\n",
        "        costo_noche = 50000\n",
        "    elif tipo.lower() == \"doble\":\n",
        "        costo_noche = 60000\n",
        "    elif tipo.lower() == \"familiar\":\n",
        "        costo_noche = 80000\n",
        "    elif tipo.lower() == \"suite\":\n",
        "        costo_noche = 90000\n",
        "    else:\n",
        "      print(\"❌ Tipo de habitación inválido.\")\n",
        "      return\n",
        "\n",
        "    try:\n",
        "      capacidad = int(Habitaciones[habitacion]['Capacidad'])\n",
        "\n",
        "    except:\n",
        "      print(\"❌ Error al leer la capacidad de la habitación.\")\n",
        "      return\n",
        "\n",
        "    try:\n",
        "      personas = int(input(f\"Ingrese número de personas (máx {capacidad}): \"))\n",
        "      if personas <= 0 or personas > capacidad:\n",
        "        print(\"❌ Número de personas inválido.\")\n",
        "        return\n",
        "    except ValueError:\n",
        "      print(\"❌ Ingrese un número válido de personas.\")\n",
        "      return\n",
        "\n",
        "    total = costo_noche * personas * noches\n",
        "\n",
        "\n",
        "    # Guardar solo la reserva (sin cambiar estado aún)\n",
        "    Reservas[documento] = {\n",
        "        \"Nombre\": nombre_huesped,\n",
        "        \"Tipo\": tipo,\n",
        "        \"Habitacion\": habitacion,\n",
        "        \"Ingreso\": fecha_ingreso_dt,\n",
        "        \"Salida\": fecha_salida_dt,\n",
        "        \"Noches\": noches,\n",
        "        \"Costo\": total,\n",
        "        \"CheckIn\": False  # Aún no ha hecho ingreso\n",
        "    }\n",
        "\n",
        "    print(\"📅 Reserva registrada exitosamente. Comprobante:\")\n",
        "    print(\"==============================================\")\n",
        "    print(f\"Nombre del huésped: {nombre_huesped}\")\n",
        "    print(f\"Tipo de habitación: {tipo}\")\n",
        "    print(f\"Número de habitación: {habitacion}\")\n",
        "    print(f\"Fecha de ingreso: {fecha_ingreso_dt.date()}\")\n",
        "    print(f\"Fecha de salida: {fecha_salida_dt.date()}\")\n",
        "    print(f\"Número de noches: {noches}\")\n",
        "    print(f\"Costo total estimado: ${total:,.0f}\")\n",
        "    print(\"==============================================\")\n",
        "\n",
        "    import os\n",
        "\n",
        "    archivo = \"Reservas.csv\"\n",
        "    es_nuevo = not os.path.exists(archivo)\n",
        "\n",
        "    DfReservas = pd.DataFrame([Reservas[documento]])\n",
        "    DfReservas.to_csv(archivo, mode='a', header=es_nuevo, index=False)\n",
        "\n",
        "\n",
        "#Registro de Ingreso\n",
        "\n",
        "def RegistrodeIngreso():\n",
        "    print(\"🛎️ Registro de Ingreso (Check-In)\")\n",
        "\n",
        "    documento = input(\"Ingrese el documento del huésped: \")\n",
        "    if documento not in Reservas:\n",
        "        print(\"❌ No existe una reserva registrada para este documento.\")\n",
        "        return\n",
        "\n",
        "    reserva = Reservas[documento]\n",
        "    if reserva[\"CheckIn\"]:\n",
        "        print(\"⚠️ El huésped ya ha realizado el check-in previamente.\")\n",
        "        return\n",
        "\n",
        "    habitacion = reserva[\"Habitacion\"]\n",
        "    if Habitaciones[habitacion][\"Estado\"] == \"Ocupada\":\n",
        "        print(\"❌ La habitación ya está ocupada.\")\n",
        "        return\n",
        "\n",
        "    # Actualizar estado\n",
        "    reserva[\"CheckIn\"] = True\n",
        "    Habitaciones[habitacion][\"Estado\"] = \"Ocupada\"\n",
        "\n",
        "    print(\"✅🛎️ Check-In realizado exitosamente.\")\n",
        "    print(\"--------------------------------------\")\n",
        "    print(f\"Nombre del huésped: {reserva['Nombre']}\")\n",
        "    print(f\"Habitación asignada: {habitacion}\")\n",
        "    print(f\"Fecha de ingreso: {reserva['Ingreso'].date()}\")\n",
        "    print(\"--------------------------------------\")\n",
        "\n",
        "\n",
        "#Registro de salida\n",
        "\n",
        "\n",
        "from datetime import datetime\n",
        "\n",
        "def RegistrodeSalida():\n",
        "    print(\"🚪 Registro de Salida (Check-Out)\")\n",
        "\n",
        "    documento = input(\"Ingrese el documento del huésped: \")\n",
        "    if documento not in Reservas:\n",
        "        print(\"❌ No se encontró ninguna reserva con ese documento.\")\n",
        "        return\n",
        "\n",
        "    reserva = Reservas[documento]\n",
        "\n",
        "    if not reserva.get(\"CheckIn\", False):\n",
        "        print(\"❌ El huésped no ha realizado el check-in.\")\n",
        "        return\n",
        "\n",
        "    habitacion = reserva[\"Habitacion\"]\n",
        "    tipo = reserva[\"Tipo\"]\n",
        "    fecha_ingreso = reserva[\"Ingreso\"]\n",
        "    fecha_salida_str = input(\"Ingrese la fecha de salida (AAAA-MM-DD): \")\n",
        "\n",
        "\n",
        "    fecha_salida_dt = datetime.strptime(fecha_salida_str, \"%Y-%m-%d\")\n",
        "    if fecha_salida_dt <= fecha_ingreso:\n",
        "        print(\"❌ La fecha de salida debe ser posterior a la de ingreso.\")\n",
        "        return\n",
        "\n",
        "    noches = (fecha_salida_dt - fecha_ingreso).days\n",
        "    print(f\"🌙 Noches de estancia: {noches}\")\n",
        "    if noches < 1:\n",
        "      noches = 1\n",
        "\n",
        "    print(f\"📅 Fecha de ingreso: {fecha_ingreso.date()}\")\n",
        "    print(f\"📅 Fecha de salida: {fecha_salida_dt.date()}\")\n",
        "\n",
        "\n",
        "    if tipo.lower() == \"sencilla\":\n",
        "        costo_noche = 50000\n",
        "    elif tipo.lower() == \"doble\":\n",
        "        costo_noche = 60000\n",
        "    elif tipo.lower() == \"familiar\":\n",
        "        costo_noche = 80000\n",
        "    elif tipo.lower() == \"suite\":\n",
        "        costo_noche = 90000\n",
        "    else:\n",
        "        print(\"❌ Tipo de habitación inválido.\")\n",
        "\n",
        "    try:\n",
        "      capacidad = int(Habitaciones[habitacion]['Capacidad'])\n",
        "\n",
        "    except:\n",
        "        print(\"❌ Error al leer la capacidad de la habitación.\")\n",
        "\n",
        "    try:\n",
        "      personas = int(input(f\"Ingrese número de personas (máx {capacidad}): \"))\n",
        "      if personas <= 0 or personas > capacidad:\n",
        "        print(\"❌ Número de personas inválido.\")\n",
        "\n",
        "    except ValueError:\n",
        "      print(\"❌ Ingrese un número válido de personas.\")\n",
        "\n",
        "\n",
        "    total = costo_noche * personas * noches\n",
        "\n",
        "    # Factura\n",
        "    print(\"🧾 Factura de Estancia\")\n",
        "    print(\"===================================\")\n",
        "    print(f\"Nombre completo: {reserva['Nombre']}\")\n",
        "    print(f\"Documento: {documento}\")\n",
        "    print(f\"Tipo de habitación: {tipo}\")\n",
        "    print(f\"Número de habitación: {habitacion}\")\n",
        "    print(f\"Fecha de ingreso: {fecha_ingreso.date()}\")\n",
        "    print(f\"Fecha de salida: {fecha_salida_dt.date()}\")\n",
        "    print(f\"Número total de noches: {noches}\")\n",
        "    print(f\"Valor por noche: ${costo_noche:,.0f}\")\n",
        "    print(f\"Total a pagar: ${total:,.0f}\")\n",
        "    print(\"===================================\")\n",
        "    print(\"Gracias por su visita!\")\n",
        "\n",
        "    # Actualizar habitación y limpiar reserva\n",
        "\n",
        "    Habitaciones[habitacion][\"Estado\"] = \"Disponible\"\n",
        "    reserva[\"CheckOut\"] = fecha_salida_dt\n",
        "    reserva[\"CobroReal\"] = total\n",
        "    reserva[\"NochesReales\"] = noches\n",
        "\n"
      ],
      "metadata": {
        "id": "UWCvGt1btYR2"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "BEjyfRLKQBA3",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c0f9214c-2e39-4115-b9b3-1027d736be92"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "✅ Archivo admins.txt creado con usuarios por defecto.\n"
          ]
        }
      ],
      "source": [
        "#Administración\n",
        "\n",
        "def crear_archivo_admins():\n",
        "    try:\n",
        "        with open(\"admins.txt\", \"x\") as f:  # \"x\" solo crea si no existe\n",
        "            f.write(\"admin1,310523\\n\")\n",
        "            f.write(\"admin2,1152451\\n\")\n",
        "            print(\"✅ Archivo admins.txt creado con usuarios por defecto.\")\n",
        "    except FileExistsError:\n",
        "        print(\"📂 El archivo admins.txt ya existe.\")\n",
        "\n",
        "crear_archivo_admins()\n",
        "\n",
        "\n",
        "import pandas as pd\n",
        "\n",
        "def cargar_admins():\n",
        "    try:\n",
        "        df = pd.read_csv(\"admins.txt\", header=None, names=[\"usuario\", \"contraseña\"])\n",
        "        return df\n",
        "    except FileNotFoundError:\n",
        "        print(\"❌ Archivo de administradores no encontrado.\")\n",
        "        return pd.DataFrame(columns=[\"usuario\", \"contraseña\"])\n",
        "\n",
        "def login_admin():\n",
        "    admins = cargar_admins()\n",
        "    usuario = input(\"👤 Usuario de administrador: \")\n",
        "    clave = input(\"🔒 Contraseña: \")\n",
        "\n",
        "    match = admins[\n",
        "        (admins[\"usuario\"].str.strip() == usuario.strip()) &\n",
        "        (admins[\"contraseña\"].astype(str).str.strip() == clave.strip())\n",
        "    ]\n",
        "    if not match.empty:\n",
        "        print(\"✅ Acceso concedido al módulo de administración.\")\n",
        "        return True\n",
        "    else:\n",
        "        print(\"❌ Usuario o contraseña incorrectos.\")\n",
        "        return False\n",
        "\n",
        "\n",
        "\n",
        "def Administracion():\n",
        "    if not login_admin():\n",
        "        return\n",
        "\n",
        "    while True:\n",
        "        print(\"\\n📊 MÓDULO DE ADMINISTRACIÓN\")\n",
        "        print(\"1. Total de huéspedes registrados\")\n",
        "        print(\"2. Total de habitaciones ocupadas\")\n",
        "        print(\"3. Total de habitaciones disponibles\")\n",
        "        print(\"4. Ingresos generados por reservas\")\n",
        "        print(\"5. Tiempo promedio de estancia por huésped\")\n",
        "        print(\"6. Lista de huéspedes con historial de reservas\")\n",
        "        print(\"7. Huésped con más noches\")\n",
        "        print(\"8. Huésped con menos noches\")\n",
        "        print(\"9. Volver al menú principal\")\n",
        "\n",
        "        opcion = input(\"Seleccione una opción: \")\n",
        "\n",
        "        if opcion == \"1\":\n",
        "            print(f\"Total huéspedes registrados: {len(Huespedes)}\")\n",
        "\n",
        "        elif opcion == \"2\":\n",
        "            ocupadas = sum(1 for h in Habitaciones.values() if h[\"Estado\"] == \"Ocupada\")\n",
        "            print(f\"Total habitaciones ocupadas: {ocupadas}\")\n",
        "\n",
        "        elif opcion == \"3\":\n",
        "            disponibles = sum(1 for h in Habitaciones.values() if h[\"Estado\"] == \"Disponible\")\n",
        "            print(f\"Total habitaciones disponibles: {disponibles}\")\n",
        "\n",
        "        elif opcion == \"4\":\n",
        "            total_ingresos = sum(r.get(\"CobroReal\", 0) for r in Reservas.values() if r.get(\"CheckOut\"))\n",
        "            print(f\"💰 Ingresos totales: ${total_ingresos:,.0f}\")\n",
        "\n",
        "        elif opcion == \"5\":\n",
        "            total_noches = sum(r.get(\"NochesReales\", 0) for r in Reservas.values() if r.get(\"CheckOut\"))\n",
        "            total_personas = len([r for r in Reservas.values() if r.get(\"CheckOut\")])\n",
        "            promedio = total_noches / total_personas if total_personas else 0\n",
        "            print(f\"📏 Estancia promedio: {promedio:.2f} noches\")\n",
        "\n",
        "        elif opcion == \"6\":\n",
        "            print(\"📋 Lista de huéspedes con historial:\")\n",
        "            for doc, res in Reservas.items():\n",
        "                print(f\"- {res['Nombre']} (Documento: {doc})\")\n",
        "\n",
        "        elif opcion == \"7\":\n",
        "            maximo = max(Reservas.items(), key=lambda x: x[1].get(\"NochesReales\", 0))\n",
        "            print(f\"🏆 Huésped con más noches: {maximo[1]['Nombre']} ({maximo[1].get('NochesReales', 0)} noches)\")\n",
        "\n",
        "        elif opcion == \"8\":\n",
        "            minimo = min((r for r in Reservas.values() if r.get(\"CheckOut\")), key=lambda x: x.get(\"NochesReales\", float('inf')))\n",
        "            print(f\"📉 Huésped con menos noches: {minimo['Nombre']} ({minimo.get('NochesReales', 0)} noches)\")\n",
        "\n",
        "        elif opcion == \"9\":\n",
        "            break\n",
        "\n",
        "        else:\n",
        "            print(\"❌ Opción inválida.\")\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Graficos\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "def mostrar_graficos():\n",
        "    print(\"📊 Generando gráficos...\")\n",
        "\n",
        "    # Datos para gráficos\n",
        "    tipos = [\"Sencilla\", \"Doble\", \"Familiar\", \"Suite\"]\n",
        "    ocupadas = [sum(1 for h in Habitaciones.values() if h[\"Tipo\"].lower() == tipo.lower() and h[\"Estado\"] == \"Ocupada\") for tipo in tipos]\n",
        "    disponibles = [sum(1 for h in Habitaciones.values() if h[\"Tipo\"].lower() == tipo.lower() and h[\"Estado\"] == \"Disponible\") for tipo in tipos]\n",
        "\n",
        "    # 1. Gráfico de barras\n",
        "    plt.figure(figsize=(10, 5))\n",
        "    plt.bar([\"Estándar\", \"Suite\"], [ocupadas[0] + ocupadas[1] + ocupadas[2], ocupadas[3]], color=[\"blue\", \"purple\"])\n",
        "    plt.title(\"Comparación habitaciones estándar vs suite (ocupadas)\")\n",
        "    plt.xlabel(\"Tipo\")\n",
        "    plt.ylabel(\"Cantidad\")\n",
        "    plt.show()\n",
        "\n",
        "    # 2. Pie chart ocupadas vs disponibles\n",
        "    total_ocupadas = sum(ocupadas)\n",
        "    total_disponibles = sum(disponibles)\n",
        "    plt.pie([total_ocupadas, total_disponibles], labels=[\"Ocupadas\", \"Disponibles\"], autopct=\"%1.1f%%\", colors=[\"red\", \"green\"])\n",
        "    plt.title(\"Distribución de habitaciones\")\n",
        "    plt.show()\n",
        "\n",
        "    # 3. Línea: check-out por día\n",
        "    fechas_checkout = [res[\"CheckOut\"].date() for res in Reservas.values() if \"CheckOut\" in res]\n",
        "    if fechas_checkout:\n",
        "        fechas_unicas = sorted(set(fechas_checkout))\n",
        "        conteo = [fechas_checkout.count(f) for f in fechas_unicas]\n",
        "        plt.plot(fechas_unicas, conteo, marker='o')\n",
        "        plt.title(\"Check-Outs por día\")\n",
        "        plt.xlabel(\"Fecha\")\n",
        "        plt.ylabel(\"Cantidad\")\n",
        "        plt.xticks(rotation=45)\n",
        "        plt.tight_layout()\n",
        "        plt.show()\n",
        "\n",
        "    # 4. Barras horizontales: noches por huésped (Top 10)\n",
        "    noches_huesped = sorted(((res[\"Nombre\"], res.get(\"NochesReales\", 0)) for res in Reservas.values()), key=lambda x: x[1], reverse=True)[:10]\n",
        "    nombres = [x[0] for x in noches_huesped]\n",
        "    noches = [x[1] for x in noches_huesped]\n",
        "    plt.barh(nombres, noches, color=\"orange\")\n",
        "    plt.title(\"Top 10 huéspedes por noches\")\n",
        "    plt.xlabel(\"Noches\")\n",
        "    plt.gca().invert_yaxis()\n",
        "    plt.tight_layout()\n",
        "    plt.show()\n",
        "\n",
        "    # 5. Scatter: noches vs valor pagado\n",
        "    noches = [res.get(\"NochesReales\", 0) for res in Reservas.values()]\n",
        "    pagos = [res.get(\"CobroReal\", 0) for res in Reservas.values()]\n",
        "    plt.scatter(noches, pagos)\n",
        "    plt.title(\"Relación noches vs total pagado\")\n",
        "    plt.xlabel(\"Noches\")\n",
        "    plt.ylabel(\"Valor pagado\")\n",
        "    plt.show()\n",
        "\n",
        "    # 6. Pie chart: ingresos por tipo (estándar vs suite)\n",
        "    ingresos_estandar = sum(res.get(\"CobroReal\", 0) for res in Reservas.values() if res[\"Tipo\"].lower() != \"suite\")\n",
        "    ingresos_suite = sum(res.get(\"CobroReal\", 0) for res in Reservas.values() if res[\"Tipo\"].lower() == \"suite\")\n",
        "    plt.pie([ingresos_estandar, ingresos_suite], labels=[\"Estándar\", \"Suite\"], autopct=\"%1.1f%%\")\n",
        "    plt.title(\"Ingresos por tipo de habitación\")\n",
        "    plt.show()\n",
        "\n",
        "    # 7. Histograma: duración de estancias\n",
        "    noches_validas = [res.get(\"NochesReales\", 0) for res in Reservas.values()]\n",
        "    plt.hist(noches_validas, bins=range(1, max(noches_validas)+2), edgecolor=\"black\")\n",
        "    plt.title(\"Duración de estancias\")\n",
        "    plt.xlabel(\"Noches\")\n",
        "    plt.ylabel(\"Cantidad de huéspedes\")\n",
        "    plt.show()\n",
        "\n",
        "    # 8. Combinado: ingresos diarios (barras + línea)\n",
        "    ingresos_dia = {}\n",
        "    for res in Reservas.values():\n",
        "        if \"CheckOut\" in res:\n",
        "            fecha = res[\"CheckOut\"].date()\n",
        "            ingresos_dia[fecha] = ingresos_dia.get(fecha, 0) + res.get(\"CobroReal\", 0)\n",
        "    fechas = sorted(ingresos_dia)\n",
        "    ingresos = [ingresos_dia[f] for f in fechas]\n",
        "    plt.bar(fechas, ingresos, color=\"lightblue\", label=\"Ingresos\")\n",
        "    plt.plot(fechas, ingresos, color=\"darkblue\", marker=\"o\", label=\"Tendencia\")\n",
        "    plt.title(\"Ingresos diarios\")\n",
        "    plt.xlabel(\"Fecha\")\n",
        "    plt.ylabel(\"Ingresos ($)\")\n",
        "    plt.xticks(rotation=45)\n",
        "    plt.legend()\n",
        "    plt.tight_layout()\n",
        "    plt.show()\n"
      ],
      "metadata": {
        "id": "4bGcjRaCUmKc"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "KGm0gpmnDA_b"
      },
      "outputs": [],
      "source": [
        "def menu_principal():\n",
        "  while True:\n",
        "    print(\"Menú Principal\")\n",
        "    MenuOpciones()\n",
        "    opcion = input(\"Ingrese una opción: \")\n",
        "\n",
        "    if opcion == \"1\":\n",
        "      codigo = input(\"Ingrese el código de la habitación: \")\n",
        "      if codigo in Habitaciones:\n",
        "        print(\"La habitación ya existe.\")\n",
        "        actualizar = input(\"¿Desea actualizar la información de la habitación?\")\n",
        "        if actualizar.lower() == \"s\":\n",
        "          ActualizarHabitacion(codigo)\n",
        "        else:\n",
        "          print(\"La habitación no se actualizará.\")\n",
        "      else:\n",
        "        RegistrodeHabitacion(codigo)\n",
        "    elif opcion == \"2\":\n",
        "      consultardisponibilidaddeHabitaciones()\n",
        "    elif opcion == \"3\":\n",
        "      RegistroHuespedes()\n",
        "    elif opcion == \"4\":\n",
        "      RealizarReserva()\n",
        "    elif opcion == \"5\":\n",
        "      RegistrodeIngreso()\n",
        "    elif opcion == \"6\":\n",
        "      RegistrodeSalida()\n",
        "    elif opcion == \"7\":\n",
        "      Administracion()\n",
        "    elif opcion == \"8\":\n",
        "      mostrar_graficos()\n",
        "    elif opcion == \"Salir\":\n",
        "      print(\"¡Gracias por Visitarnos!\")\n",
        "    else:\n",
        "      print(\"❌ Opción inválida. Por favor, seleccione una opción válida.\")\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "menu_principal()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 703
        },
        "id": "4jdbwUHANacy",
        "outputId": "46d6b7b6-db75-4833-a596-a7ffcf4dc3c3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Menú Principal\n",
            "1. 🛌 Registro de Habitación\n",
            "2. 🛌 Consultar disponibilidad de Habitaciones\n",
            "3. 🙋 Registro Huespedes\n",
            "4. 📅 Realizar Reserva\n",
            "5. 🛎️ Registro Ingreso (Check-In)\n",
            "6. ➡️ Registro Salida (Check-Out)\n",
            "7. 📊 Administración\n",
            "8. Graficos\n",
            "9. Salir\n",
            "Ingrese una opción: 4\n",
            "📅 Realizar Reserva de Habitación\n",
            "Ingrese el documento del huésped: 1152451004\n",
            "❌ El huésped no está registrado. No se puede realizar la reserva.\n",
            "Menú Principal\n",
            "1. 🛌 Registro de Habitación\n",
            "2. 🛌 Consultar disponibilidad de Habitaciones\n",
            "3. 🙋 Registro Huespedes\n",
            "4. 📅 Realizar Reserva\n",
            "5. 🛎️ Registro Ingreso (Check-In)\n",
            "6. ➡️ Registro Salida (Check-Out)\n",
            "7. 📊 Administración\n",
            "8. Graficos\n",
            "9. Salir\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "KeyboardInterrupt",
          "evalue": "Interrupted by user",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m/tmp/ipython-input-14-3716417329.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mmenu_principal\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/tmp/ipython-input-11-1038145762.py\u001b[0m in \u001b[0;36mmenu_principal\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Menú Principal\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m     \u001b[0mMenuOpciones\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m     \u001b[0mopcion\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Ingrese una opción: \"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mopcion\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"1\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36mraw_input\u001b[0;34m(self, prompt)\u001b[0m\n\u001b[1;32m   1175\u001b[0m                 \u001b[0;34m\"raw_input was called, but this frontend does not support input requests.\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1176\u001b[0m             )\n\u001b[0;32m-> 1177\u001b[0;31m         return self._input_request(\n\u001b[0m\u001b[1;32m   1178\u001b[0m             \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprompt\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1179\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_ident\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"shell\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36m_input_request\u001b[0;34m(self, prompt, ident, parent, password)\u001b[0m\n\u001b[1;32m   1217\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1218\u001b[0m                 \u001b[0;31m# re-raise KeyboardInterrupt, to truncate traceback\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1219\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Interrupted by user\"\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1220\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1221\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlog\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwarning\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Invalid Message:\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexc_info\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: Interrupted by user"
          ]
        }
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
